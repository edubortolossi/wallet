package com.netshoes.mcorder.support.mocks;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

import com.netshoes.mcorder.gateways.outputs.http.external.resources.ReserveRequest;
import com.netshoes.mcorder.gateways.outputs.http.external.response.ProductReserveResponse;
import com.netshoes.mcorder.support.LoadJsonFileUtils;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@Getter
@RestController
@RequiredArgsConstructor
@Profile("container-test")
@RequestMapping(value = "/reserve")
public class ControllerMock {

  @Autowired
  private LoadJsonFileUtils loadJsonFileUtils;

  private static final String FOLDER_TEST_PATH = "container-tests/fb-inventory-reserve-controller-mock";
  private static final String SCENARIO_01 = "scenario-01";
  private static final String RESERVE_JSON = "reserve-response.json";
  private static final String ERROR_JSON = "error-response.json";

  private boolean errorSimulate;

  @PostMapping(value = "/api/reserves",
      consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
  public void reserve(@RequestBody final ReserveRequest reserveDataContractResource)
      throws RuntimeException {
    if (errorSimulate) {
      throw new RuntimeException("Service unavailable");
    }
  }

  @GetMapping(value = "/api/reserves/BR/guid/{guid}",
      consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity<List<ProductReserveResponse>> getInventories(
      @PathVariable final String guid) throws Exception {
    if (errorSimulate) {
      return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body(new ArrayList<>());
    }
    final var response = loadJsonFileUtils
        .asObject(FOLDER_TEST_PATH, SCENARIO_01, RESERVE_JSON, ProductReserveResponse.class);
    return ResponseEntity.ok(List.of(response));
  }

  public void reset() {
    errorSimulate = false;
  }

  public void enableErrorSimulate() {
    errorSimulate = true;
  }

}
